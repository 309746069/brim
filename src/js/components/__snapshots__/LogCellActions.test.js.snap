// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`basic snapshot 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <LogCellActions
    field={
      Field {
        "name": "_path",
        "type": "string",
        "value": "conn",
      }
    }
    log={
      Log {
        "descriptor": Array [
          Object {
            "name": "_td",
            "type": "int",
          },
          Object {
            "name": "_path",
            "type": "string",
          },
          Object {
            "name": "ts",
            "type": "time",
          },
          Object {
            "name": "uid",
            "type": "string",
          },
          Object {
            "name": "id.orig_h",
            "type": "addr",
          },
          Object {
            "name": "id.orig_p",
            "type": "port",
          },
          Object {
            "name": "id.resp_h",
            "type": "addr",
          },
          Object {
            "name": "id.resp_p",
            "type": "port",
          },
          Object {
            "name": "proto",
            "type": "enum",
          },
          Object {
            "name": "service",
            "type": "string",
          },
          Object {
            "name": "duration",
            "type": "interval",
          },
          Object {
            "name": "orig_bytes",
            "type": "count",
          },
          Object {
            "name": "resp_bytes",
            "type": "count",
          },
          Object {
            "name": "conn_state",
            "type": "string",
          },
          Object {
            "name": "local_orig",
            "type": "bool",
          },
          Object {
            "name": "local_resp",
            "type": "bool",
          },
          Object {
            "name": "missed_bytes",
            "type": "count",
          },
          Object {
            "name": "history",
            "type": "string",
          },
          Object {
            "name": "orig_pkts",
            "type": "count",
          },
          Object {
            "name": "orig_ip_bytes",
            "type": "count",
          },
          Object {
            "name": "resp_pkts",
            "type": "count",
          },
          Object {
            "name": "resp_ip_bytes",
            "type": "count",
          },
          Object {
            "name": "tunnel_parents",
            "type": "set[string]",
          },
        ],
        "tuple": Array [
          "0",
          "conn",
          "1425612054.369843",
          "Cynwae4qh1GxM82hQ2",
          "192.168.0.50",
          "1900",
          "239.255.255.250",
          "1900",
          "udp",
          "-",
          "2.000293",
          "282",
          "0",
          "S0",
          "-",
          "-",
          "0",
          "D",
          "3",
          "366",
          "0",
          "0",
          "(empty)",
        ],
      }
    }
    onClose={[Function]}
    space={
      Object {
        "packet_support": true,
      }
    }
    style={
      Object {
        "left": 1,
        "top": 1,
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <MenuItem
          onClick={[Function]}
        >
          Filter out these values
        </MenuItem>,
        <MenuItem
          onClick={[Function]}
        >
          Only show these values
        </MenuItem>,
        <MenuItem
          onClick={[Function]}
        >
          Count by _path
        </MenuItem>,
        <hr />,
        <MenuItem
          onClick={[Function]}
        >
          Download PCAPS
        </MenuItem>,
      ],
      "onOutsideClick": [Function],
      "style": Object {
        "left": 1,
        "top": 1,
      },
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": "0",
        "nodeType": "function",
        "props": Object {
          "children": "Filter out these values",
          "onClick": [Function],
        },
        "ref": null,
        "rendered": "Filter out these values",
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": "1",
        "nodeType": "function",
        "props": Object {
          "children": "Only show these values",
          "onClick": [Function],
        },
        "ref": null,
        "rendered": "Only show these values",
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": "2",
        "nodeType": "function",
        "props": Object {
          "children": "Count by _path",
          "onClick": [Function],
        },
        "ref": null,
        "rendered": "Count by _path",
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": "3",
        "nodeType": "host",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": "hr",
      },
      Object {
        "instance": null,
        "key": "4",
        "nodeType": "function",
        "props": Object {
          "children": "Download PCAPS",
          "onClick": [Function],
        },
        "ref": null,
        "rendered": "Download PCAPS",
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <MenuItem
            onClick={[Function]}
          >
            Filter out these values
          </MenuItem>,
          <MenuItem
            onClick={[Function]}
          >
            Only show these values
          </MenuItem>,
          <MenuItem
            onClick={[Function]}
          >
            Count by _path
          </MenuItem>,
          <hr />,
          <MenuItem
            onClick={[Function]}
          >
            Download PCAPS
          </MenuItem>,
        ],
        "onOutsideClick": [Function],
        "style": Object {
          "left": 1,
          "top": 1,
        },
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": "0",
          "nodeType": "function",
          "props": Object {
            "children": "Filter out these values",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": "Filter out these values",
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "1",
          "nodeType": "function",
          "props": Object {
            "children": "Only show these values",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": "Only show these values",
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "2",
          "nodeType": "function",
          "props": Object {
            "children": "Count by _path",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": "Count by _path",
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "3",
          "nodeType": "host",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": "hr",
        },
        Object {
          "instance": null,
          "key": "4",
          "nodeType": "function",
          "props": Object {
            "children": "Download PCAPS",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": "Download PCAPS",
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
